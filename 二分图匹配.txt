//判断是否为二分图
int IsBipartiteGraph() { //判断是否为二分图(队列bfs)
	int i, q[101];
	int head, tail, nextcolor, j, k;
	head = tail = 1;
	color[1] = 1;
	q[tail] = 1;
	tail++;
	while (head < tail) {
		if (color[q[head]] == 1)
			nextcolor = -1;
		else if (color[q[head]] == -1)
			nextcolor = 1;
		for (i = 1;i <= n;i++) {//颜色相反不做处理
			if (e[q[head]][i] == 1) {
				if (color[i] == 0) {
					color[i] = nextcolor;
					q[tail] = i;
					tail++;
				}
				else if (color[i] == color[q[head]])
					return 0;
			}
		}
		head++;
	}
	return 1;
}
//二分图匈牙利算法
#include<stdio.h>
#include<string.h>
int e[1100][1100], book[1100], match[1100], n, woman, man;
int dfs(int x) {
	int i;
	for (i = 1;i <= woman + man;i++) { //扫描x的每一条连线
		if (book[i] == 0 && e[x][i] == 1) {//如果i点未曾被尝试改动，并且i点与x点有连线
			book[i] = 1;//标记i点曾经试图被改动
			if (match[i] == 0 || dfs(match[i]) == 1) {//如果i点未被匹配或者能找到新的匹配
				match[x] = i;//更新配对关系
				match[i] = x;
				return 1;
			}
		}
	}
	return 0;
}
int main()
{
	int i, j, k, m, a, b, num;
	while (scanf("%d", &n) && n) {
		num = 0;
		scanf("%d%d", &woman, &man);
		for (i = 1;i <= n;i++) {
			scanf("%d%d", &a, &b);
			e[a][b + woman] = e[b + woman][a] = 1;
		}
		for (i = 1;i <= woman+man;	i++) {//扫描每一个点(可能只扫描女生)
			memset(book, 0, sizeof(book));
			if (dfs(i) == 1)num++;
		}
		printf("%d\n", num);
		memset(match, 0, sizeof(match));
		memset(e, 0, sizeof(e));//要清零
	}
	return 0;
}
